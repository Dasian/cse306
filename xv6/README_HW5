David Espiritu
Vicky Chan
CSE 306 HW5

-----For Vicky-----
	Implementation I believe should be done in proc.c.
	I recommend looking at vm.c and reading this doc.
	I implemented the syscall stuff (except for sys_munmap
	 in sysproc.c if you could look at that <3)
	I'm currently working on allocating mem in mmap() [proc.c]
	There's really 5 things we need to figure out:
		1. Allocate mem (mmap/munmap implementation)
		2. Book keeping page counts and references
		3. forking shenanigans
		4. Page fault COW (copy on write) stuff/extending
			page fault handler
		5. Implement a user program to show functionality

------TODO------

	Figure out how to implement sys_munmap in kernel/sysproc.c

	Augment the kernel memory allocator so as to maintain a 
	reference count associated with each physical page.
	- book keeping

	Implement page table updates and writing dirty pages
	in munmap()

	Modify fork() [in proc.c] so proper pages are inherited. 

	Implement (or extend) page fault handler so that it 
	determines whether the faulting addr lies within the region
	of the virtual addr space mapped via mmap(). If it does, it
	should take appropriate actions to make the page resident 
	and satisfy all requirements regarding COW semantics (copy
	on write) and it should arrange for the writing back of 
	dirty pages 

	Create a scheme for keeping track of dirty pages associated
	with memory mapped files and arrange for them to be written
	back to the underlying file at a suitable time; Certainly by
	the time the last shared mapping of the file has been deleted
	using munmap()
	- book keeping?

	Implement user mode programs to show the functinality.
	Should show the various types of mappings and behavior of 
	shared and private mappings.

------David's Notes------
****CURRENT PROBLEM**** 
 mmap_alloc
 - Growing memory with allocuvm also needs to update 
   myproc() -> sz
 - How do we reserve a user memory address range?

Book keeping:
 - kernel memory allocator needs to maintain a ref cnt of phy p?
 - Keep track of dirty pages and when to write them back?
 - The mapped table should be created with kalloc()
 - Create a proc variable called mmt (memory mapped table)
   - needs to be allocated in allocproc();
   - need to copy this table during fork();
 - I currently have the mapped table allocated as a single
   page. The entries are kept as a double linked list in
   the page. The head of the list is kept in the proc struct. 
   - How does this apply to when entries exceed 1 page? 
     - Only gonna have one page; similar to how the page table
       only has one page (I think)
   - The mem mapped entry (mme) is found in proc.h
     - It is kept as a doubly linked list in the allocated mem
     - The head prev link will point to itself
     - The tail next link will point to 0
     - A new function: find_free_mmt_entry(void* start)
       - This will find an empty slot in the mmt to be used
       - It iterates through the page until it finds a 
         prev value of 0
       - When removing a mmt entry, the entry slot will be 0'd 
     - If the linked list is empty, the proc entry 
       mme is set to -1.
     - New entries to the linked list become the head to make the
       operation O(1)
 - Allocation of the map table is located in allocproc();
   - Sets first entry to -1 (linked list is empty)
   - Allocates 1 page of mem using kalloc and keeps track of the
     starting address in mmt_start var in proc struct

Memory Allocation (mmap):
kalloc() can be used to obtain 1 page of physical mem.
mappages() creates a PTE for given virtual and physical addr.
allocuvm() extends mem and adds those pages to the table.
 - Maybe use allocuvm() ONLY IF there are NO OTHER FREE PAGES!
   munmap can free some space that can later be reused
copyout() can be used to copy the files to the memory.
 - readi and writei into a private local buffer and then
   call copyout()?

Memory Deallocation (munmap):
- how does page table entry updating work?
- should writing back to file be done here?
  - doesn't solve everything since we aren't guarenteed
    that mapped memory is ALWAYS deallocated

Page Fault Handler:
- Associated with flag HW5_pf_handler
- I think this is located in the default case in trap.c

Forking:
- check out copyuvm() in vm.c; it copies a parent's page
  table and gives it to the child
  - this is already used in fork()
- Page tables should also be SHARED until either of the process
  writes to it (see Copy on Write)
- Does the bookkeeping table (mmt) need to be copied?

User Test Program:
- associated with flag HW5_userprog
- located in user/maptest.c
- Show MAP_PRIVATE, MAP_SHARED, and MAP_FILE
- Also needs to show forking and COW semantics



*********************************
*********************************
-------General Info-------

hw5 and specific sections of hw5 can be turned on/off based on
the flags located in kernel/hwinit.h. The previous homeworks
have been turned off by default to prevent unforseen bugs.

---------EXERCISE README-----------

Files Changed:
homework toggle: kernel/hwinit.h
function implementation: kernel/proc.h kernel/proc.c
user test program: user/maptest.c user/Makefile
syscall implementation: usys.S kernel/sysproc.c 
	user/user.h kernel/syscall.h kernel/syscall.c

mmap():
Since every process will have its own memmory mapped files,
mmap() was implemented in kernel/proc.c. 
mmap() reserves a space in the user address space by
****INSERT HOW IT RESERVES USER ADDRESS****
This reserves the user memory.
The function also creates a new entry in the mapped linked
list which is used for bookkeeping [Explained in next section].

Bookkeeping in the proc structure:
We kept track of various mapping information for every mmap()
call. This includes the starting addr, the size,
file information, and permissions that were provided from
the mmap call. This information was kept track of in a linked
list; one node for every mapping/call to mmap. The head of the
list is kept in the proc structure. It is doubly linked where
node_prev points to itself if it's the head and node_next points 
to 0 if its to tail. The entire list exists in a page allocated
by using kalloc(). The nodes are a struct defined in proc.h.
During munmap() an entry is released back to the page and 
can be later reused by mmap().

munmap(): 
This function finds the entries in the map linked list that
corresponds with the address. It removes the entry from the
linked list, and it also updates the corresponding page
table entries. The that was returned by mmap was also 0d
out. Before updating these things however, mmap writes back
dirty entries.

Page Fault handler:
This is located in trap.c and is toggled by the HW5_pf_handler
macro in kernel/hwinit.h (Default to True in this hw). It
checks if the faulting address is in any of the mapped ranges
(iterates through the mapped linked list). If it isn't, an
exception is raised but if it is, further processing is done.
If the file flag is set, the file with the proper offset is
loaded as the physical address in the page table entry. Dirty
pages are also written back whenever the handler is called.

*********************************
*********************************

--------HW SPECIFICATIONS--------

The C compiler might delay writes to SHARED memory unless they are
done through vars declared as volatile. If we aren't seeing any
updates to shared memory you should consider looking at the 
assembly code :(

Don't try to implement any page replacement! 
If a physical page cannot be allocated during page fault handling,
then just kill the faulting process. 
A diagnostic message should also be printed the console

Fork shenanigans:
	A child process created by fork() should inherit its parent's 
	mappings created by mmap(), with the same flags.

	Mappings created with the flag MAP_SHARED should share the same
	physical memory with the child and parent.

	Mappings created WITHOUT MAP_SHARED should obey Copy-on-write 
	semantics

Copy-on-write semantics:
after a fork, the parent and child share any
resident physical memory pages associated with the mapping but
write permissions have been disabled in the page tables for 
each process. A read fault for either the parent or child on
a non-resident page in the region will result in the newly 
allocated physical page being shared between the parent and child.
Upon a WRITE fault caused by an attempt by the parent or child to 
write a page in the mapped region, a new page should be allocated
regardless of whether the data was already resident, and the data
should be copied from an existing resident page into the new page.
The new page should be installed in the page table for the faulting
process, WITH WRITE PERMISSION.

-------MMAP() SPECIFICATIONS-----

void *mmap(int fd, size_t length, off_t offset, int flags);
(parameters were implemented as all type int)

map either a file or anon mem into calling process' addr space
syscall 28

args:
	fd - file desc of file to be mapped (use if flag is set)

	length - length of mapped region
	
	offset - offset of the file to be mapped
		make sure length + offset <= filesize
	
	flags:
		MAP_PRIVATE (0) 
			Mapping is private to the calling process
		
		MAP_SHARED (1)
			Physical mem allocated will be shared among all
			processes that map that "object" (see fork() 
			discussion)

			Write to the mapped region will be immediately visible
			to other processess sharing the mapping
		
		MAP_FILE (2)
			Can be OR'ed into flags argument
			MAY NOT BE USED WITH MAP_SHARED

			IF SPECIFIED:
			Fd and offset should be used when specified
			Once a file has been mapped using mmap(), calling
			close() on the original fd SHOULD NOT have ANY effect
			on the mapping.
			Writes to the mapped region should be WRITTEN BACK to
			the original file, assuming the flags used to open the
			original file descriptor permitted writing
			If an attempt is made to write to a mem mapped file 
			that didn't originally allow writing, the process 
			attempting this should be killed.

			readi() and writei() should be used to r/w the file.
			Data should be copied between buffer cache and resident
			pages allocated for the memory-mapped file. 

			DO NOT ATTEMPT TO FIX THE FOLLOWING PROBLEM:	
			- This creates a certain problem of coherence
			concerning writes to a file using the write() syscall
			and writes occuring via mem mapping, as two versions
			of the file can exist at once: one in the buffer cache
			and one in a mapped physical page. Real systems 
			typically avoid this by integrating the buffer cache 
			and virtual memory system, BUT WE WILL NOT ATTEMPT THIS


			IF NOT SPECIFIED:
			the "object" to be mapped is ANONYMOUS memory.
			The memory should be zero filled on first access.

return
	(void *) -1 on failure
	starting addr of chosen range on success

------MUNMAP() SPECIFICATIONS-----

int munmap(void* addr, int length);

unmap a region previously mapped using mmap()
syscall 29

addr arg is an addr previously returned by mmap()
The entire region associated with that addr should be unmapped

If the region was mapped using MAP_FILE:
	by the time mmap() returns, any dirty pages will have been
	written back to the underlying file

returns 0 on sucess, otherwise -1
